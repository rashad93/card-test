{"version":3,"sources":["Shuffle.js","Card.js","App.js","serviceWorker.js","index.js"],"names":["Shuffle","state","input","axios","method","url","headers","data","this","props","numberOfPlayer","then","result","console","log","catch","error","React","Component","Card","validInput","errorData","getPlayer","bind","test","playerInput","value","setState","ifValidInput","ifError","style","color","className","type","ref","c","required","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sTAkCeA,E,YA7BX,aAAc,IAAD,8BACT,+CACKC,MAAQ,CACTC,MAAO,IAHF,E,iFAUTC,IAAM,CACFC,OAAQ,OACRC,IAAI,GAAD,OAfE,kCAgBLC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,MAAMC,iBAEhBC,KAAK,SAAAC,GACJC,QAAQC,IAAIF,KAEbG,MAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,O,+BAIhC,OACI,4BAAKR,KAAKC,MAAMC,oB,GAzBNO,IAAMC,WCsDbC,E,YArDX,aAAc,IAAD,8BACT,+CACKlB,MAAO,CACRC,MAAO,GACPkB,YAAa,EACbJ,OAAQ,EACRK,UAAY,IAGhB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBATR,E,yEAcW,SACHC,KAAKhB,KAAKiB,YAAYC,QAM/BlB,KAAKP,MAAMe,OACXR,KAAKmB,SAAS,CACVX,OAAO,EACPK,UAAY,KAGpBb,KAAKmB,SAAS,CACVzB,MAAQM,KAAKiB,YAAYC,MACzBN,YAAa,KAbjBZ,KAAKmB,SAAS,CACVX,OAAO,EACPK,UAAY,qD,+BAef,IAAD,OACEO,EAAe,mDAAyBpB,KAAKP,MAAMC,OACnD2B,EAAU,wBAAIC,MAAS,CAACC,MAAO,QAASvB,KAAKP,MAAMoB,WACzD,OACI,6BACE,uDACE,2BAAOW,UAAY,aAAaC,KAAK,SAASC,IAAK,SAACC,GAAD,OAAO,EAAKV,YAAcU,GAAIC,UAAQ,KACtF5B,KAAKP,MAAMe,MAAQa,GACtB,6BACA,4BACII,KAAK,SAASI,QAAS7B,KAAKc,UAAWI,MAAQ,UADnD,UAGAlB,KAAKP,MAAMmB,WAAcQ,EAAgB,KACxCpB,KAAKP,MAAMmB,WAAc,kBAAC,EAAD,CAASV,eAAkBF,KAAKP,MAAMC,QAAY,U,GA/CzEe,IAAMC,WCSVoB,MARf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,QCIcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC,iB","file":"static/js/main.98f0aafd.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nconst API_PATH = 'http://localhost/api/index.php';\r\n\r\nclass Shuffle extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            input: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        //const url = `${API_PATH}`\r\n\r\n        axios({\r\n            method: 'post',\r\n            url: `${API_PATH}`,\r\n            headers: { 'content-type': 'application/json' },\r\n            data: this.props.numberOfPlayer\r\n          })\r\n            .then(result => {\r\n              console.log(result)\r\n            })\r\n            .catch(error => console.log(error) );\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <h1>{this.props.numberOfPlayer}</h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Shuffle","import React from 'react';\r\nimport Shuffle from './Shuffle';\r\n\r\n\r\nclass Card extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state ={\r\n            input: '',\r\n            validInput : false,\r\n            error : false,\r\n            errorData : ''\r\n        }\r\n\r\n        this.getPlayer = this.getPlayer.bind(this)\r\n        \r\n    }\r\n\r\n    getPlayer(){\r\n        const regexNumber = /^[1-9]/\r\n        if( !regexNumber.test(this.playerInput.value) ){\r\n            this.setState({\r\n                error: true,\r\n                errorData : 'Input value does not exist or value is invalid'\r\n            })\r\n        }else{\r\n            if( this.state.error ){\r\n                this.setState({\r\n                    error: false,\r\n                    errorData : ''\r\n                })\r\n            }\r\n            this.setState({\r\n                input : this.playerInput.value,\r\n                validInput : true\r\n            })\r\n        }    \r\n    }\r\n    render(){\r\n        const ifValidInput = <h5>Number of players : {this.state.input}</h5>\r\n        const ifError = <h5 style = {{color: \"red\"}}>{this.state.errorData}</h5>\r\n        return (\r\n            <div>\r\n              <h3>Enter Number of Players</h3>\r\n                <input className = 'input-name' type=\"number\" ref={(c) => this.playerInput = c}  required />\r\n                { (this.state.error)? ifError  : ifError }\r\n                <br/>\r\n                <button\r\n                    type=\"button\" onClick={this.getPlayer} value = 'submit'\r\n                >Submit</button>\r\n              {(this.state.validInput) ? ifValidInput  : null}\r\n              { (this.state.validInput) ? <Shuffle numberOfPlayer = {this.state.input} /> : null }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Card","import React from 'react';\nimport './App.css';\nimport Card from './Card';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Card />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}